name: Continuous Integration

on:
  push:
    branches: [main, develop, feature/*, hotfix/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          pip install -r apps/api/requirements/development.txt
          pip install safety bandit semgrep

      - name: Run ESLint
        run: npm run lint:web

      - name: Run Prettier check
        run: cd apps/web && npx prettier --check .

      - name: Run Python linting
        run: |
          cd apps/api && flake8 .
          cd packages/core && flake8 .
          cd packages/auth && flake8 .
          cd packages/cache && flake8 .
          cd packages/database && flake8 .
          cd packages/config && flake8 .

      - name: Run Python formatting check
        run: |
          cd apps/api && black --check .
          cd apps/api && isort --check-only .

      - name: Run TypeScript type checking
        run: |
          cd apps/web && npx tsc --noEmit
          cd packages/api-client && npx tsc --noEmit

      - name: Run Python type checking
        run: |
          cd apps/api && python -m mypy . || true
          cd packages/core && python -m mypy . || true

      - name: Security scan - Python dependencies
        run: |
          cd apps/api && safety check --json --output safety-report.json || true
          cd apps/api && bandit -r . -f json -o bandit-report.json || true

      - name: Security scan - Node.js dependencies
        run: |
          cd apps/web && npm audit --audit-level moderate --json > npm-audit-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            apps/api/safety-report.json
            apps/api/bandit-report.json
            apps/web/npm-audit-report.json

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality
    
    strategy:
      matrix:
        test-group: [web, api, packages]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.test-group == 'web'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        if: matrix.test-group != 'web'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          if [ "${{ matrix.test-group }}" = "web" ]; then
            npm ci
            cd apps/web && npm ci
          else
            pip install -r apps/api/requirements/development.txt
            cd packages/core && pip install -e .
            cd packages/auth && pip install -e .
            cd packages/cache && pip install -e .
            cd packages/database && pip install -e .
            cd packages/config && pip install -e .
          fi

      - name: Run Web tests
        if: matrix.test-group == 'web'
        run: |
          cd apps/web && npm test -- --coverage --watchAll=false --passWithNoTests

      - name: Run API tests
        if: matrix.test-group == 'api'
        run: |
          cd apps/api && python -m pytest --cov=. --cov-report=xml --cov-report=html

      - name: Run Package tests
        if: matrix.test-group == 'packages'
        run: |
          cd packages/core && python -m pytest --cov=. --cov-report=xml
          cd packages/auth && python -m pytest --cov=. --cov-report=xml
          cd packages/cache && python -m pytest --cov=. --cov-report=xml
          cd packages/database && python -m pytest --cov=. --cov-report=xml
          cd packages/config && python -m pytest --cov=. --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: |
            apps/web/coverage/lcov.info
            apps/api/coverage.xml
            packages/*/coverage.xml
          flags: ${{ matrix.test-group }}

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_fullstack_blog
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          pip install -r apps/api/requirements/development.txt
          cd packages/core && pip install -e .
          cd packages/auth && pip install -e .
          cd packages/cache && pip install -e .
          cd packages/database && pip install -e .
          cd packages/config && pip install -e .

      - name: Run Django migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_fullstack_blog
          REDIS_URL: redis://localhost:6379/0
        run: |
          cd apps/api && python manage.py migrate

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_fullstack_blog
          REDIS_URL: redis://localhost:6379/0
          CELERY_BROKER_URL: redis://localhost:6379/1
        run: |
          cd tests && npm run test:integration

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: integration-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          pip install -r apps/api/requirements/development.txt

      - name: Install Playwright
        run: |
          cd tests && npm ci
          npx playwright install --with-deps

      - name: Start services with Docker
        run: |
          docker-compose up -d postgres redis
          sleep 10

      - name: Setup Django
        run: |
          cd apps/api && python manage.py migrate
          cd apps/api && python manage.py collectstatic --noinput

      - name: Start Django API
        run: |
          cd apps/api && python manage.py runserver &
          sleep 10

      - name: Build and start Next.js
        run: |
          cd apps/web && npm ci
          cd apps/web && npm run build
          cd apps/web && npm start &
          sleep 15

      - name: Run E2E tests
        run: |
          cd tests && npx playwright test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: tests/playwright-report/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: integration-tests
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start services
        run: |
          docker-compose up -d
          sleep 30

      - name: Run performance tests
        run: |
          cd tests && npm run test:performance

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: tests/performance-results/

  # Build and Push Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push'
    
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      web-image: ${{ steps.meta-web.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract API metadata
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract Web metadata
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          file: ./apps/api/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/web
          file: ./apps/web/Dockerfile
          target: runner
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build-images
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner - API
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-images.outputs.api-image }}
          format: 'sarif'
          output: 'trivy-api-results.sarif'

      - name: Run Trivy vulnerability scanner - Web
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-images.outputs.web-image }}
          format: 'sarif'
          output: 'trivy-web-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: |
            trivy-api-results.sarif
            trivy-web-results.sarif

      - name: Run Semgrep security analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/django
            p/javascript
            p/typescript
            p/react

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, e2e-tests, build-images, security-scan]
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.code-quality.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' }}
        run: |
          echo "✅ CI Pipeline completed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

      - name: Notify failure
        if: ${{ needs.code-quality.result == 'failure' || needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' }}
        run: |
          echo "❌ CI Pipeline failed!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          exit 1