name: Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - security

jobs:
  # Node.js Dependencies Update
  update-nodejs-deps:
    name: Update Node.js Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Update root dependencies
        run: |
          echo "Updating root package.json dependencies..."
          if [ "${{ github.event.inputs.update_type }}" = "security" ]; then
            npm audit fix --force
          elif [ "${{ github.event.inputs.update_type }}" = "patch" ]; then
            ncu -u --target patch
          elif [ "${{ github.event.inputs.update_type }}" = "minor" ]; then
            ncu -u --target minor
          else
            ncu -u
          fi
          npm install

      - name: Update Web app dependencies
        run: |
          cd apps/web
          echo "Updating Web app dependencies..."
          if [ "${{ github.event.inputs.update_type }}" = "security" ]; then
            npm audit fix --force
          elif [ "${{ github.event.inputs.update_type }}" = "patch" ]; then
            ncu -u --target patch
          elif [ "${{ github.event.inputs.update_type }}" = "minor" ]; then
            ncu -u --target minor
          else
            ncu -u
          fi
          npm install

      - name: Update API client dependencies
        run: |
          cd packages/api-client
          echo "Updating API client dependencies..."
          if [ "${{ github.event.inputs.update_type }}" = "security" ]; then
            npm audit fix --force
          elif [ "${{ github.event.inputs.update_type }}" = "patch" ]; then
            ncu -u --target patch
          elif [ "${{ github.event.inputs.update_type }}" = "minor" ]; then
            ncu -u --target minor
          else
            ncu -u
          fi
          npm install

      - name: Run tests after update
        run: |
          npm run test:web
          npm run lint:web

      - name: Create Pull Request for Node.js updates
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update Node.js dependencies (${{ github.event.inputs.update_type || 'patch' }})"
          title: "üîÑ Update Node.js Dependencies (${{ github.event.inputs.update_type || 'patch' }})"
          body: |
            ## Dependency Updates
            
            This PR updates Node.js dependencies with ${{ github.event.inputs.update_type || 'patch' }} level updates.
            
            ### Changes
            - Updated root package.json dependencies
            - Updated Web app dependencies  
            - Updated API client dependencies
            
            ### Testing
            - ‚úÖ Web tests passed
            - ‚úÖ Linting passed
            
            ### Review Notes
            Please review the changes and ensure all tests pass before merging.
            
            Auto-generated by GitHub Actions.
          branch: dependency-updates/nodejs-${{ github.event.inputs.update_type || 'patch' }}
          delete-branch: true

  # Python Dependencies Update
  update-python-deps:
    name: Update Python Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pip-tools and safety
        run: |
          pip install pip-tools safety pip-audit

      - name: Update API dependencies
        run: |
          cd apps/api
          echo "Updating API dependencies..."
          
          if [ "${{ github.event.inputs.update_type }}" = "security" ]; then
            # Only update packages with known vulnerabilities
            safety check --json > safety_report.json || true
            pip-audit --format=json --output=audit_report.json || true
            
            # This would require custom logic to update only vulnerable packages
            echo "Security-only updates require manual review"
          else
            # Update requirements files
            pip-compile --upgrade requirements/base.in
            pip-compile --upgrade requirements/development.in
            pip-compile --upgrade requirements/production.in
          fi

      - name: Update package dependencies
        run: |
          for package in core auth cache database config; do
            cd packages/$package
            echo "Updating $package dependencies..."
            
            if [ -f "requirements.txt" ]; then
              pip-compile --upgrade requirements.txt
            fi
            
            if [ -f "setup.py" ] || [ -f "pyproject.toml" ]; then
              pip install -e .
            fi
            
            cd ../..
          done

      - name: Run security checks
        run: |
          cd apps/api
          safety check
          pip-audit

      - name: Run tests after update
        run: |
          pip install -r apps/api/requirements/development.txt
          cd apps/api && python -m pytest
          npm run test:packages

      - name: Create Pull Request for Python updates
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update Python dependencies (${{ github.event.inputs.update_type || 'patch' }})"
          title: "üêç Update Python Dependencies (${{ github.event.inputs.update_type || 'patch' }})"
          body: |
            ## Python Dependency Updates
            
            This PR updates Python dependencies with ${{ github.event.inputs.update_type || 'patch' }} level updates.
            
            ### Changes
            - Updated API requirements files
            - Updated package dependencies
            - Security vulnerabilities addressed
            
            ### Testing
            - ‚úÖ API tests passed
            - ‚úÖ Package tests passed
            - ‚úÖ Security checks passed
            
            ### Review Notes
            Please review the changes and ensure all tests pass before merging.
            
            Auto-generated by GitHub Actions.
          branch: dependency-updates/python-${{ github.event.inputs.update_type || 'patch' }}
          delete-branch: true

  # Docker Base Image Updates
  update-docker-images:
    name: Update Docker Base Images
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for base image updates
        run: |
          echo "Checking for Docker base image updates..."
          
          # Check Node.js image updates
          CURRENT_NODE=$(grep "FROM node:" apps/web/Dockerfile | head -1 | cut -d: -f2 | cut -d- -f1)
          LATEST_NODE=$(curl -s "https://registry.hub.docker.com/v2/repositories/library/node/tags/?page_size=100" | jq -r '.results[] | select(.name | test("^[0-9]+\\.[0-9]+\\.[0-9]+-alpine$")) | .name' | sort -V | tail -1 | cut -d- -f1)
          
          # Check Python image updates  
          CURRENT_PYTHON=$(grep "FROM python:" apps/api/Dockerfile | head -1 | cut -d: -f2 | cut -d- -f1)
          LATEST_PYTHON=$(curl -s "https://registry.hub.docker.com/v2/repositories/library/python/tags/?page_size=100" | jq -r '.results[] | select(.name | test("^[0-9]+\\.[0-9]+\\.[0-9]+-slim$")) | .name' | sort -V | tail -1 | cut -d- -f1)
          
          echo "Current Node.js: $CURRENT_NODE, Latest: $LATEST_NODE"
          echo "Current Python: $CURRENT_PYTHON, Latest: $LATEST_PYTHON"
          
          # Update Dockerfiles if newer versions available
          if [ "$CURRENT_NODE" != "$LATEST_NODE" ]; then
            sed -i "s/FROM node:$CURRENT_NODE/FROM node:$LATEST_NODE/g" apps/web/Dockerfile
            echo "Updated Node.js from $CURRENT_NODE to $LATEST_NODE"
          fi
          
          if [ "$CURRENT_PYTHON" != "$LATEST_PYTHON" ]; then
            sed -i "s/FROM python:$CURRENT_PYTHON/FROM python:$LATEST_PYTHON/g" apps/api/Dockerfile
            echo "Updated Python from $CURRENT_PYTHON to $LATEST_PYTHON"
          fi

      - name: Test Docker builds
        run: |
          echo "Testing Docker builds..."
          docker build -t test-api apps/api/
          docker build -t test-web apps/web/

      - name: Create Pull Request for Docker updates
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update Docker base images"
          title: "üê≥ Update Docker Base Images"
          body: |
            ## Docker Base Image Updates
            
            This PR updates Docker base images to the latest stable versions.
            
            ### Changes
            - Updated Node.js base image
            - Updated Python base image
            
            ### Testing
            - ‚úÖ Docker builds successful
            
            ### Security Benefits
            - Latest security patches included
            - Reduced attack surface
            
            Auto-generated by GitHub Actions.
          branch: dependency-updates/docker-images
          delete-branch: true

  # Notification
  notify:
    name: Notify Update Status
    runs-on: ubuntu-latest
    needs: [update-nodejs-deps, update-python-deps, update-docker-images]
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.update-nodejs-deps.result == 'success' && needs.update-python-deps.result == 'success' && needs.update-docker-images.result == 'success' }}
        run: |
          echo "‚úÖ Dependency updates completed successfully!"
          echo "Pull requests created for review and testing"

      - name: Notify failure
        if: ${{ needs.update-nodejs-deps.result == 'failure' || needs.update-python-deps.result == 'failure' || needs.update-docker-images.result == 'failure' }}
        run: |
          echo "‚ùå Some dependency updates failed"
          echo "Please check the workflow logs for details"