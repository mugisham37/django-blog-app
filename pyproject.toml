[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fullstack-monolith-transformation"
version = "1.0.0"
description = "Enterprise-grade fullstack monolithic architecture with Django API and Next.js frontend"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Organization", email = "dev@yourorg.com"}
]
keywords = ["django", "nextjs", "monolith", "fullstack", "enterprise"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Django",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
requires-python = ">=3.11"

[project.urls]
Homepage = "https://github.com/your-org/fullstack-monolith-transformation"
Repository = "https://github.com/your-org/fullstack-monolith-transformation.git"
Documentation = "https://your-org.github.io/fullstack-monolith-transformation"
"Bug Tracker" = "https://github.com/your-org/fullstack-monolith-transformation/issues"

# ===================================
# Black Configuration
# ===================================
[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    # Directories to exclude
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
  | node_modules
  | venv
  | \.vscode
  | \.idea
)/
'''
skip-string-normalization = false
skip-magic-trailing-comma = false

# ===================================
# isort Configuration
# ===================================
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
split_on_trailing_comma = true
known_first_party = [
    "enterprise_core",
    "enterprise_auth", 
    "enterprise_cache",
    "enterprise_config",
    "enterprise_database",
    "enterprise_types"
]
known_django = ["django"]
known_third_party = [
    "rest_framework",
    "celery",
    "redis",
    "psycopg2",
    "pytest",
    "factory_boy",
    "faker",
    "requests",
    "channels",
    "channels_redis"
]
sections = [
    "FUTURE",
    "STDLIB", 
    "DJANGO",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER"
]
skip_glob = [
    "*/migrations/*",
    "*/venv/*",
    "*/node_modules/*",
    "*/.git/*",
    "*/__pycache__/*"
]
atomic = true
combine_as_imports = true
force_sort_within_sections = true
honor_noqa = true
remove_redundant_aliases = true

# ===================================
# Coverage Configuration
# ===================================
[tool.coverage.run]
source = [
    "apps/api",
    "packages/auth/src",
    "packages/cache/src", 
    "packages/config/src",
    "packages/core/src",
    "packages/database/src"
]
omit = [
    "*/migrations/*",
    "*/venv/*",
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/node_modules/*",
    "manage.py",
    "*/settings/*",
    "*/wsgi.py",
    "*/asgi.py"
]
branch = true
parallel = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# ===================================
# Pytest Configuration  
# ===================================
[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings.test"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
testpaths = ["tests", "apps", "packages"]
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--verbose",
    "--tb=short",
    "--cov=apps/api",
    "--cov=packages",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--durations=10",
    "--maxfail=5"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "api: marks tests as API tests",
    "auth: marks tests as authentication tests",
    "cache: marks tests as cache tests",
    "database: marks tests as database tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# ===================================
# MyPy Configuration
# ===================================
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Django-specific settings
plugins = ["mypy_django_plugin.main"]

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "factory_boy.*",
    "faker.*", 
    "channels.*",
    "channels_redis.*"
]
ignore_missing_imports = true

[tool.django-stubs]
django_settings_module = "config.settings.development"

# ===================================
# Bandit Security Configuration
# ===================================
[tool.bandit]
exclude_dirs = [
    "tests",
    "*/migrations/*", 
    "*/venv/*",
    "*/node_modules/*"
]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests

# ===================================
# Ruff Configuration (Alternative to Flake8)
# ===================================
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # bandit
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "DTZ", # flake8-datetimez
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "NPY", # numpy
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "S101",   # use of assert detected
    "S311",   # standard pseudo-random generators are not suitable for security/cryptographic purposes
    "T201",   # print found
    "PLR0913", # too many arguments to function call
]
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations"
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["S101", "PLR2004", "S106"]
"**/migrations/*.py" = ["E501", "RUF012"]
"manage.py" = ["T201"]
"**/settings/*.py" = ["S105", "S106"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pylint]
max-args = 5
max-branches = 12
max-returns = 6
max-statements = 50