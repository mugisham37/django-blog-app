{
  "info": {
    "name": "Enterprise Blog API",
    "description": "Comprehensive API test collection for the enterprise blog platform",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "pm.globals.set('base_url', pm.environment.get('base_url') || 'http://localhost:8000/api/v1');",
          "",
          "// Auto-refresh token if needed",
          "if (pm.globals.get('token_expires_at') && new Date() > new Date(pm.globals.get('token_expires_at'))) {",
          "    console.log('Token expired, refreshing...');",
          "    // Token refresh logic would go here",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 2000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "pm.test('Response has proper headers', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000/api/v1"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "    pm.expect(responseJson.user).to.have.property('id');",
                  "    pm.expect(responseJson.user).to.have.property('username');",
                  "    pm.expect(responseJson.user).to.have.property('email');",
                  "});",
                  "",
                  "pm.test('Password is not returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.user).to.not.have.property('password');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"TestPassword123!\",\n  \"password_confirm\": \"TestPassword123!\",\n  \"first_name\": \"{{$randomFirstName}}\",\n  \"last_name\": \"{{$randomLastName}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register/",
              "host": ["{{base_url}}"],
              "path": ["auth", "register", ""]
            }
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has tokens', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('access_token');",
                  "    pm.expect(responseJson).to.have.property('refresh_token');",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "    ",
                  "    // Store tokens for subsequent requests",
                  "    pm.globals.set('access_token', responseJson.access_token);",
                  "    pm.globals.set('refresh_token', responseJson.refresh_token);",
                  "    pm.globals.set('user_id', responseJson.user.id);",
                  "});",
                  "",
                  "pm.test('Tokens are valid format', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.access_token).to.be.a('string');",
                  "    pm.expect(responseJson.access_token.length).to.be.above(10);",
                  "    pm.expect(responseJson.refresh_token).to.be.a('string');",
                  "    pm.expect(responseJson.refresh_token.length).to.be.above(10);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"TestPassword123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login/",
              "host": ["{{base_url}}"],
              "path": ["auth", "login", ""]
            }
          }
        },
        {
          "name": "Get User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile data is complete', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('username');",
                  "    pm.expect(responseJson).to.have.property('email');",
                  "    pm.expect(responseJson).to.have.property('first_name');",
                  "    pm.expect(responseJson).to.have.property('last_name');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/profile/",
              "host": ["{{base_url}}"],
              "path": ["auth", "profile", ""]
            }
          }
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('New access token received', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('access_token');",
                  "    pm.globals.set('access_token', responseJson.access_token);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/refresh/",
              "host": ["{{base_url}}"],
              "path": ["auth", "refresh", ""]
            }
          }
        }
      ]
    },
    {
      "name": "Blog Posts",
      "item": [
        {
          "name": "List Posts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('count');",
                  "    pm.expect(responseJson).to.have.property('results');",
                  "    pm.expect(responseJson.results).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Posts have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.results.length > 0) {",
                  "        const post = responseJson.results[0];",
                  "        pm.expect(post).to.have.property('id');",
                  "        pm.expect(post).to.have.property('title');",
                  "        pm.expect(post).to.have.property('slug');",
                  "        pm.expect(post).to.have.property('author');",
                  "        pm.expect(post).to.have.property('created_at');",
                  "        pm.globals.set('test_post_slug', post.slug);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/blog/posts/",
              "host": ["{{base_url}}"],
              "path": ["blog", "posts", ""]
            }
          }
        },
        {
          "name": "Create Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Created post has correct data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('title');",
                  "    pm.expect(responseJson).to.have.property('slug');",
                  "    pm.expect(responseJson.title).to.equal('API Test Post');",
                  "    pm.globals.set('created_post_id', responseJson.id);",
                  "    pm.globals.set('created_post_slug', responseJson.slug);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"API Test Post\",\n  \"content\": \"This is a test post created via API testing.\",\n  \"status\": \"published\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/blog/posts/",
              "host": ["{{base_url}}"],
              "path": ["blog", "posts", ""]
            }
          }
        },
        {
          "name": "Get Post Detail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Post detail is complete', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('title');",
                  "    pm.expect(responseJson).to.have.property('content');",
                  "    pm.expect(responseJson).to.have.property('author');",
                  "    pm.expect(responseJson).to.have.property('category');",
                  "    pm.expect(responseJson).to.have.property('tags');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/blog/posts/{{created_post_slug}}/",
              "host": ["{{base_url}}"],
              "path": ["blog", "posts", "{{created_post_slug}}", ""]
            }
          }
        },
        {
          "name": "Update Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Post was updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.title).to.equal('Updated API Test Post');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated API Test Post\",\n  \"content\": \"This post has been updated via API testing.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/blog/posts/{{created_post_slug}}/",
              "host": ["{{base_url}}"],
              "path": ["blog", "posts", "{{created_post_slug}}", ""]
            }
          }
        },
        {
          "name": "Search Posts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search results are relevant', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('results');",
                  "    if (responseJson.results.length > 0) {",
                  "        const post = responseJson.results[0];",
                  "        const searchTerm = 'test';",
                  "        const titleMatch = post.title.toLowerCase().includes(searchTerm);",
                  "        const contentMatch = post.content && post.content.toLowerCase().includes(searchTerm);",
                  "        pm.expect(titleMatch || contentMatch).to.be.true;",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/blog/posts/?search=test",
              "host": ["{{base_url}}"],
              "path": ["blog", "posts", ""],
              "query": [
                {
                  "key": "search",
                  "value": "test"
                }
              ]
            }
          }
        },
        {
          "name": "Delete Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/blog/posts/{{created_post_slug}}/",
              "host": ["{{base_url}}"],
              "path": ["blog", "posts", "{{created_post_slug}}", ""]
            }
          }
        }
      ]
    },
    {
      "name": "Comments",
      "item": [
        {
          "name": "List Comments",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Comments have required structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('results');",
                  "    if (responseJson.results.length > 0) {",
                  "        const comment = responseJson.results[0];",
                  "        pm.expect(comment).to.have.property('id');",
                  "        pm.expect(comment).to.have.property('content');",
                  "        pm.expect(comment).to.have.property('author');",
                  "        pm.expect(comment).to.have.property('created_at');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/blog/posts/{{test_post_slug}}/comments/",
              "host": ["{{base_url}}"],
              "path": ["blog", "posts", "{{test_post_slug}}", "comments", ""]
            }
          }
        },
        {
          "name": "Create Comment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Comment was created correctly', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson.content).to.equal('This is a test comment via API.');",
                  "    pm.globals.set('created_comment_id', responseJson.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"This is a test comment via API.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/blog/posts/{{test_post_slug}}/comments/",
              "host": ["{{base_url}}"],
              "path": ["blog", "posts", "{{test_post_slug}}", "comments", ""]
            }
          }
        }
      ]
    },
    {
      "name": "Error Handling",
      "item": [
        {
          "name": "404 Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response has proper structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/blog/posts/non-existent-post/",
              "host": ["{{base_url}}"],
              "path": ["blog", "posts", "non-existent-post", ""]
            }
          }
        },
        {
          "name": "401 Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error response indicates authentication required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Unauthorized Post\",\n  \"content\": \"This should fail.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/blog/posts/",
              "host": ["{{base_url}}"],
              "path": ["blog", "posts", ""]
            }
          }
        }
      ]
    }
  ]
}
