# Pre-commit hooks for code quality enforcement
# See https://pre-commit.com for more information

repos:
  # ===================================
  # General Code Quality
  # ===================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--unsafe]
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: detect-private-key
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: [--fix=lf]
      - id: no-commit-to-branch
        args: [--branch, main, --branch, master, --branch, production]

  # ===================================
  # Python Code Quality
  # ===================================
  
  # Black - Python code formatter
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3.11
        args: [--config=pyproject.toml]
        files: \.py$

  # isort - Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--settings-path=pyproject.toml]
        files: \.py$

  # Flake8 - Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--config=setup.cfg]
        additional_dependencies:
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-docstrings
          - flake8-import-order
          - flake8-quotes
          - flake8-security
          - flake8-django
          - pep8-naming

  # Bandit - Security linting
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-c, pyproject.toml]
        additional_dependencies: ["bandit[toml]"]

  # MyPy - Static type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        args: [--config-file=pyproject.toml]
        additional_dependencies:
          - django-stubs
          - djangorestframework-stubs
          - types-requests
          - types-redis
          - types-python-dateutil

  # Safety - Dependency vulnerability scanning
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        args: [--ignore=70612]  # Ignore Jinja2 vulnerability in dev dependencies

  # ===================================
  # JavaScript/TypeScript Code Quality
  # ===================================
  
  # ESLint - JavaScript/TypeScript linting
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.56.0
    hooks:
      - id: eslint
        files: \.(js|jsx|ts|tsx)$
        types: [file]
        args: [--fix, --ext, .js,.jsx,.ts,.tsx]
        additional_dependencies:
          - eslint@^8.56.0
          - "@typescript-eslint/eslint-plugin@^6.19.0"
          - "@typescript-eslint/parser@^6.19.0"
          - eslint-config-next@^14.1.0
          - eslint-config-prettier@^9.1.0
          - eslint-plugin-import@^2.29.1
          - eslint-plugin-jsx-a11y@^6.8.0
          - eslint-plugin-react@^7.33.2
          - eslint-plugin-react-hooks@^4.6.0
          - eslint-plugin-security@^2.1.0
          - eslint-plugin-sonarjs@^0.23.0

  # Prettier - Code formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        files: \.(js|jsx|ts|tsx|json|css|scss|md|yaml|yml)$
        args: [--config, .prettierrc.js]
        additional_dependencies:
          - prettier@^3.2.4
          - "@trivago/prettier-plugin-sort-imports@^4.3.0"
          - prettier-plugin-tailwindcss@^0.5.11

  # ===================================
  # Documentation and Markdown
  # ===================================
  
  # Markdownlint - Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        args: [--fix, --config, .markdownlint.json]

  # ===================================
  # Docker and Infrastructure
  # ===================================
  
  # Hadolint - Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # ===================================
  # Secrets Detection
  # ===================================
  
  # Detect secrets
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: package-lock.json

  # ===================================
  # Local Hooks
  # ===================================
  
  - repo: local
    hooks:
      # Custom Django checks
      - id: django-check
        name: Django Check
        entry: python apps/api/manage.py check
        language: system
        files: \.py$
        pass_filenames: false
        
      # Django migrations check
      - id: django-check-migrations
        name: Django Check Migrations
        entry: python apps/api/manage.py makemigrations --check --dry-run
        language: system
        files: \.py$
        pass_filenames: false
        
      # TypeScript type checking
      - id: typescript-check
        name: TypeScript Check
        entry: npx tsc --noEmit
        language: node
        files: \.(ts|tsx)$
        pass_filenames: false
        
      # Package.json validation
      - id: package-json-validate
        name: Package.json Validation
        entry: npx validate-package-name
        language: node
        files: package\.json$
        
      # Security audit for npm packages
      - id: npm-audit
        name: NPM Security Audit
        entry: npm audit --audit-level moderate
        language: node
        files: package\.json$
        pass_filenames: false

# Global configuration
default_language_version:
  python: python3.11
  node: "18.19.0"

# Performance optimization
default_stages: [commit, push]
minimum_pre_commit_version: "3.0.0"

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [django-check, django-check-migrations, typescript-check, npm-audit]
  submodules: false