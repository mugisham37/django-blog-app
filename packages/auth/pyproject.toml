[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "enterprise-auth-package"
version = "1.0.0"
description = "Comprehensive authentication package with JWT, MFA, OAuth2, and RBAC"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Enterprise Development Team", email = "dev@enterprise.com"}
]
maintainers = [
    {name = "Enterprise Development Team", email = "dev@enterprise.com"}
]
keywords = ["authentication", "jwt", "mfa", "oauth2", "rbac", "security"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Security",
    "Topic :: Internet :: WWW/HTTP :: Session",
]
requires-python = ">=3.8"
dependencies = [
    "PyJWT>=2.8.0",
    "bcrypt>=4.0.0",
    "cryptography>=41.0.0",
    "pyotp>=2.9.0",
    "qrcode[pil]>=7.4.0",
    "requests>=2.31.0",
]

[project.optional-dependencies]
sms = ["twilio>=8.5.0"]
aws = ["boto3>=1.28.0"]
all = ["twilio>=8.5.0", "boto3>=1.28.0"]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
]

[project.urls]
Homepage = "https://github.com/enterprise/auth-package"
Documentation = "https://auth-package.readthedocs.io/"
Repository = "https://github.com/enterprise/auth-package.git"
"Bug Tracker" = "https://github.com/enterprise/auth-package/issues"

[project.scripts]
auth-cli = "auth_package.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
auth_package = ["py.typed"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/auth_package"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]