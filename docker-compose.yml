version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fullstack_postgres
    environment:
      POSTGRES_DB: fullstack_blog
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fullstack_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fullstack_redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fullstack_network

  # Django API
  django-api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
      target: development
    container_name: fullstack_django
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/fullstack_blog
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/1
      - SECRET_KEY=dev-secret-key-change-in-production
      - ALLOWED_HOSTS=localhost,127.0.0.1,django-api
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    volumes:
      - ./apps/api:/app
      - django_static:/app/static
      - django_media:/app/media
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fullstack_network

  # Celery Worker
  celery-worker:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
      target: development
    container_name: fullstack_celery_worker
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/fullstack_blog
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/1
      - SECRET_KEY=dev-secret-key-change-in-production
    volumes:
      - ./apps/api:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A config worker -l info
    networks:
      - fullstack_network

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
      target: development
    container_name: fullstack_celery_beat
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/fullstack_blog
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/1
      - SECRET_KEY=dev-secret-key-change-in-production
    volumes:
      - ./apps/api:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    networks:
      - fullstack_network

  # Next.js Web Application
  nextjs-web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: runner
    container_name: fullstack_nextjs
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=dev-nextauth-secret-change-in-production
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - django-api
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fullstack_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: fullstack_nginx
    volumes:
      - ./infrastructure/nginx/nginx.dev.conf:/etc/nginx/nginx.conf
      - django_static:/var/www/static
      - django_media:/var/www/media
    ports:
      - "80:80"
    depends_on:
      - django-api
      - nextjs-web
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fullstack_network

  # Mailhog (Development Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: fullstack_mailhog
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web UI
    networks:
      - fullstack_network

volumes:
  postgres_data:
  redis_data:
  django_static:
  django_media:

networks:
  fullstack_network:
    driver: bridge
